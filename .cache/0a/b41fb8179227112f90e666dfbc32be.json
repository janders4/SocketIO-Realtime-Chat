{"id":"../../node_modules/Base64/base64.js","dependencies":[{"name":"/Users/johnanderson/Desktop/useful_code/real-time-chat/package.json","includedInParent":true,"mtime":1567766940753},{"name":"/Users/johnanderson/Desktop/useful_code/real-time-chat/node_modules/Base64/package.json","includedInParent":true,"mtime":1567766940143}],"generated":{"js":";(function () {\n\n  var object = typeof exports != 'undefined' ? exports : this; // #8: web workers\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  function InvalidCharacterError(message) {\n    this.message = message;\n  }\n  InvalidCharacterError.prototype = new Error;\n  InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n  // encoder\n  // [https://gist.github.com/999166] by [https://github.com/nignag]\n  object.btoa || (\n  object.btoa = function (input) {\n    var str = String(input);\n    for (\n      // initialize result and counter\n      var block, charCode, idx = 0, map = chars, output = '';\n      // if the next str index does not exist:\n      //   change the mapping table to \"=\"\n      //   check if d has no fractional digits\n      str.charAt(idx | 0) || (map = '=', idx % 1);\n      // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n      output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n    ) {\n      charCode = str.charCodeAt(idx += 3/4);\n      if (charCode > 0xFF) {\n        throw new InvalidCharacterError(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n      block = block << 8 | charCode;\n    }\n    return output;\n  });\n\n  // decoder\n  // [https://gist.github.com/1020396] by [https://github.com/atk]\n  object.atob || (\n  object.atob = function (input) {\n    var str = String(input).replace(/=+$/, '');\n    if (str.length % 4 == 1) {\n      throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n    for (\n      // initialize result and counters\n      var bc = 0, bs, buffer, idx = 0, output = '';\n      // get next character\n      buffer = str.charAt(idx++);\n      // character found in table? initialize bit storage and add its ascii value;\n      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n        // and if not first of each 4 characters,\n        // convert the first 8 bits to one ascii character\n        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n    ) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n    return output;\n  });\n\n}());\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/Base64/base64.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/Base64/base64.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}}],"sources":{"../../node_modules/Base64/base64.js":";(function () {\n\n  var object = typeof exports != 'undefined' ? exports : this; // #8: web workers\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  function InvalidCharacterError(message) {\n    this.message = message;\n  }\n  InvalidCharacterError.prototype = new Error;\n  InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n  // encoder\n  // [https://gist.github.com/999166] by [https://github.com/nignag]\n  object.btoa || (\n  object.btoa = function (input) {\n    var str = String(input);\n    for (\n      // initialize result and counter\n      var block, charCode, idx = 0, map = chars, output = '';\n      // if the next str index does not exist:\n      //   change the mapping table to \"=\"\n      //   check if d has no fractional digits\n      str.charAt(idx | 0) || (map = '=', idx % 1);\n      // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n      output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n    ) {\n      charCode = str.charCodeAt(idx += 3/4);\n      if (charCode > 0xFF) {\n        throw new InvalidCharacterError(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n      block = block << 8 | charCode;\n    }\n    return output;\n  });\n\n  // decoder\n  // [https://gist.github.com/1020396] by [https://github.com/atk]\n  object.atob || (\n  object.atob = function (input) {\n    var str = String(input).replace(/=+$/, '');\n    if (str.length % 4 == 1) {\n      throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n    for (\n      // initialize result and counters\n      var bc = 0, bs, buffer, idx = 0, output = '';\n      // get next character\n      buffer = str.charAt(idx++);\n      // character found in table? initialize bit storage and add its ascii value;\n      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n        // and if not first of each 4 characters,\n        // convert the first 8 bits to one ascii character\n        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n    ) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n    return output;\n  });\n\n}());\n"},"lineCount":62}},"error":null,"hash":"9c62bdb93e018866eb923d27b99babf3","cacheData":{"env":{}}}