{"id":"../../node_modules/@okta/okta-auth-js/lib/clock.js","dependencies":[{"name":"/Users/johnanderson/Desktop/useful_code/real-time-chat/package.json","includedInParent":true,"mtime":1567766940753},{"name":"/Users/johnanderson/Desktop/useful_code/real-time-chat/node_modules/@okta/okta-auth-js/package.json","includedInParent":true,"mtime":1567766940151},{"name":"./util","loc":{"line":1,"column":19},"parent":"/Users/johnanderson/Desktop/useful_code/real-time-chat/node_modules/@okta/okta-auth-js/lib/clock.js","resolved":"/Users/johnanderson/Desktop/useful_code/real-time-chat/node_modules/@okta/okta-auth-js/lib/util.js"}],"generated":{"js":"var util = require('./util');\n\nfunction SdkClock(localOffset) {\n  // Calculated local clock offset from server time (in milliseconds). Can be positive or negative.\n  this.localOffset = parseInt(localOffset || 0);\n}\n\nutil.extend(SdkClock.prototype, {\n  // Return the current time (in seconds)\n  now: function() {\n    var now = (Date.now() + this.localOffset) / 1000;\n    return now;\n  }\n});\n\n// factory method. Create an instance of a clock from current context.\nSdkClock.create = function(/* sdk, options */) {\n  // TODO: calculate localOffset\n  var localOffset = 0;\n  return new SdkClock(localOffset);\n};\n\nmodule.exports = SdkClock;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/@okta/okta-auth-js/lib/clock.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}}],"sources":{"../../node_modules/@okta/okta-auth-js/lib/clock.js":"var util = require('./util');\n\nfunction SdkClock(localOffset) {\n  // Calculated local clock offset from server time (in milliseconds). Can be positive or negative.\n  this.localOffset = parseInt(localOffset || 0);\n}\n\nutil.extend(SdkClock.prototype, {\n  // Return the current time (in seconds)\n  now: function() {\n    var now = (Date.now() + this.localOffset) / 1000;\n    return now;\n  }\n});\n\n// factory method. Create an instance of a clock from current context.\nSdkClock.create = function(/* sdk, options */) {\n  // TODO: calculate localOffset\n  var localOffset = 0;\n  return new SdkClock(localOffset);\n};\n\nmodule.exports = SdkClock;\n"},"lineCount":24}},"error":null,"hash":"942bcd8ad64b9dd404df43b3e5622660","cacheData":{"env":{}}}